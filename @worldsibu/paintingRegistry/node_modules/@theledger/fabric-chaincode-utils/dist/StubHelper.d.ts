/// <reference types="@theledger/fabric-shim-types" />
/// <reference types="@theledger/fabric-shim-crypto-types" />
import { ClientIdentity, Stub } from 'fabric-shim';
import { KV } from './index';
import ShimCrypto = require('fabric-shim-crypto');
/**
 *  The StubHelper is a wrapper around the `fabric-shim` Stub. Its a helper to automatically serialize and
 *  deserialize data being saved/retreived.
 */
export declare class StubHelper {
    private stub;
    private logger;
    /**
     * @param {"fabric-shim".Stub} stub
     */
    constructor(stub: Stub);
    /**
     * @returns {"fabric-shim".Stub}
     */
    getStub(): Stub;
    /**
     * Return Fabric crypto library for signing and encryption
     *
     * @returns {"fabric-shim-crypto".ShimCrypto}
     */
    getChaincodeCrypto(): ShimCrypto;
    /**
     * Return the Client Identity
     *
     * @returns {"fabric-shim".ClientIdentity}
     */
    getClientIdentity(): ClientIdentity;
    /**
     * Query the state and return a list of results.
     *
     * @param {string | Object} query - CouchDB query
     * @param keyValue - If the function should return an array with {KV} or just values
     * @returns {Promise<any>}
     */
    getQueryResultAsList(query: string | object, keyValue?: boolean): Promise<object[] | KV[]>;
    /**
     * Query the state by range
     *
     * @returns {Promise<any>}
     * @param startKey
     * @param endKey
     */
    getStateByRangeAsList(startKey: string, endKey: string): Promise<KV[]>;
    /**
     * Fetch a history for a specific key and return a list of results.
     *
     * @returns {Promise<any>}
     * @param key
     */
    getHistoryForKeyAsList(key: string): Promise<object[]>;
    /**
     *   Deletes all objects returned by the query
     *   @param {Object} query the query
     */
    deleteAllReturnedByQuery(query: string | object): Promise<KV[]>;
    /**
     * Serializes the value and store it on the state db.
     *
     * @param {String} key
     * @param value
     */
    putState(key: string, value: any): Promise<any>;
    /**
     * @param {String} key
     *
     * @return the state for the given key parsed as an Object
     */
    getStateAsObject(key: string): Promise<Object>;
    /**
     * @param {String} key
     *
     * @return the state for the given key parsed as a String
     */
    getStateAsString(key: string): Promise<string>;
    /**
     * @param {String} key
     *
     * @return the state for the given key parsed as a Date
     */
    getStateAsDate(key: string): Promise<Date>;
    /**
     * @return the Transaction date as a Javascript Date Object.
     */
    getTxDate(): Date;
    /**
     * Publish an event to the Blockchain
     *
     * @param {String} name
     * @param {Object} payload
     */
    setEvent(name: string, payload: object): void;
}
