export declare abstract class ConvectorModel<T extends ConvectorModel<any>> {
    static getOne<T extends ConvectorModel<any>>(this: new (content: any) => T, id: string, type?: new (content: any) => T): Promise<T>;
    static query<T>(type: new (content: any) => T, ...args: any[]): Promise<T | T[]>;
    static getAll<T extends ConvectorModel<any>>(this: new (content: any) => T, type?: string): Promise<T[]>;
    id: string;
    readonly abstract type: string;
    constructor();
    constructor(id: string);
    constructor(content: {
        [key in keyof T]?: T[key];
    });
    update(content: {
        [key in keyof T]?: T[key];
    }): Promise<void>;
    fetch(): Promise<void>;
    save(): Promise<void>;
    clone(): T;
    toJSON(skipEmpty?: boolean): {
        [key in keyof T]?: T[key];
    };
    delete(): Promise<void>;
    private assign(content, defaults?);
}
